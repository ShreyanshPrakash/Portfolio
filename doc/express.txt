1. Child routing : Router

// parent
app.use('/restservices/content', cmsRouter );

// child

const cmsRouter = express.Router();

cmsRouter.get( '/:document', ( req, res ) => { console.log( req.param );

    res.json({
        message: "cms route",
        route: req.params
    });

});

module.exports = {cmsRouter};

pay attention to thechild....I am not using next(). It will be wrong using here as i have handled the response here.
We are using this child router as the middleware and hence we get next but if use use that after modifying the res, then u will get
error if u call next amd that next entity or route handler say app.get(**) wildcard will also try to handle the res and hence
will gte the error.

Use next only when the current scope is not changing the res.
SO say u will fist log, then auth, then make db call then process, then auth then finally attch the response and send.
In the last one u will use res and all previous use next().

also,

appp.get( '/', ( req,res,next ), ( req,res,next), ( req,res,next ) ){

    
}


3. How to pipe data to res.json so that the stream data has a key for the UI code ?
ex:
fs.createReadStream(
            path.join(
                __dirname, '../', 'documents', `${req.params.documentId}.document.json`
            )
        )
        res.json({
            [ req.params.documentId ]: content
        });

solution ?

spreading the response in the uI redux is the best option.That way, the object structure matters in the juson file.

so : 
home: {
    intro: {},
    about: {}
}

will become home key in reducer in UI.

I like the above method as that will send the data as normal rest and not string or buffer.

Another

let data = fs.createReadStream(
            path.join(
                __dirname, '../', 'documents', `${req.params.documentId}.document.json`
            )
        )

        data.on( "data", ( data, err ) => {
            res.json({
                [ req.params.documentId ]: data   <---- data will go as buffer.Then do toString in the UI, or do it here,
                // but then in UI u have to do json.parse()
            });
        })

The best way :

data.on( "data", ( data, err ) => {
            res.json({
                [ req.params.documentId ]: JSON.parse(data.toString())  
            });
        })

use toString to convert buffer data to string
then parse that in the backend itself.Best option

But, since its a buffer, if the whole file is not loaded at a time, then the JSON.parse will throw error 
as enexpeted end of input.
So....u cannot use json.parse to parse a piece of stream data.

I think, with streams, all the above methods will have issues.